package programming;



/*
A Java exception is an object that describes an exceptional condition that has
occurred in a piece of code. When an exceptional condition arises, an object representing
that exception is created and thrown in the method that caused the error. That method may
choose to handle that exception itself, or pass it on. Either way, at some point, the exception
is caught and processed. Exceptions can be generated by the Java run-time system, or they can
be manually generated by your code.

Java exception handling is managed via five keywords: try, catch, throw, throws and finally.

Multiple Catch Clauses
In some cases, more than one exception could be raised by a single piece of code. To handle
this type of situation, you can specify two or more catch clauses, each catching a different
type of exception. When an exception is thrown, each catch statement is inspected in order, and
the first one whose type matches that of the exception is executed. After one catch statement
executes, the others are bypassed, and execution continues after the try/catch block.

throw
It is possible for your program to throw exceptions explicitly, using the throw statement. There
are two ways you can obtain a throwable object, using a parameter in a catch clause or creating
one with the new operator.

throws
If a method is capable of causing an exception that it does not handle, it must specify this behavior
so that callers of the method can guard themselves against the exception. You do this by including a
throws clause in the method declaration. A throws clause lists the types of exceptions that a method might
throw.

finally
finally creates a block of code that will be executed after a try/catch block has completed and before
the code following the try/catch block. The finally block will execute whether or not an exception is
thrown. If an exception is thrown, the finally block will execute even if no catch statement matches the
exception. Any time a method is about to return to the caller from inside a try/catch block, via an
uncaught exception or an explicit return statement, the finally clause is also executed just before the
method returns.
 */
public class ExceptionHandling {

    public static void main(String[] args){

        // multiple catch blocks
        int numbers[] = {1, 2, 3};
        try {
            int n = 10 / 2;
            int n2 = numbers[n];
            System.out.println(n2);
        } catch (ArithmeticException a){
            System.out.println("Division by zero not allowed!");
        } catch (ArrayIndexOutOfBoundsException b){
            System.out.println("Index is out of bounds!");
        }
        finally {
            System.out.println("Program finished!");
        }

        try {
            throw new MyException();
        } catch (MyException e){
            System.out.println(e.getMessage());
        }

        try {
            int n3 = throwsException();
        }catch (ArithmeticException e){
            System.out.println("Caught exception");
        }

        // multi catch
        try {
            int n3 = 1/0;
            int n4 = numbers[5];
        }catch (ArithmeticException | ArrayIndexOutOfBoundsException f){
            System.out.println("Caught exception " + f);
        }

    }

    public static int throwsException() throws ArithmeticException {
        return 10 / 0;
    }


}

class MyException extends Exception {
    @Override
    public String getMessage() {
        return "MyException has occurred!!!";
    }
}